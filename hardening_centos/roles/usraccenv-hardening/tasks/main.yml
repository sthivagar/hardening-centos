---
# tasks file for usraccenv-hardening
## Ensure password expiration is 365 days or less
##Rationale: The window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity.

- name: CIS Hardening | Ensurepassword expiration is 365 days or less
  ansible.builtin.lineinfile:
    dest: /etc/login.defs
    regexp: '^PASS_MAX_DAYS'
    line: PASS_MAX_DAYS 90

## Ensure minimum days between password changes is 7 or more
## Rationale: By restricting the frequency of password changes, an administrator can prevent users from repeatedly changing their password in an attempt to circumvent password reuse controls.

- name: CIS Hardening | Ensureminimum days between password changes is 7 or more
  asible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MIN_DAYS'
    line: PASS_WARN_AGE   7

## Ensure password expiration warning days is 7 or more
## Rationale : Providing an advance warning that a password will be expiring gives users time to think of a secure password. Users caught unaware may choose a simple password or write it down where it may be discovered.

- name: CIS Hardening | Ensurepassword expiration warning days is 7 or more
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_WARN_AGE'
    line: PASS_WARN_AGE   7

## Check for inactive password lock is 30 days or less  - This configuration applies to both distros
## Rationale: Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.

- name: Check and set inactive password lock is 30 days or less
  ansible.builtin.shell: useradd -D -f 30
  register: sec4output
  changed_when: "sec4output.rc == -1"

## Ensure all users last password change date is in the past
## Rationale: If a users recorded password change date is in the future then they could bypass any set password expiration.

#  - name: CIS Hardening | Ensureall users last password change date is in the past
#    shell: >
#      for usr in $(cut -d: -f1 /etc/shadow); do [[ $(chage --list $usr | grep '^Last password change' | cut -d: -f2) > $(date) ]] && echo "$usr :$(chage --list $usr | grep '^Last password change' | cut -d: -f2)"; done
#    args:
#      executable: /bin/bash
#    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
## Need to work the Ubuntu version ###

## Ensure system accounts are secured
## Rationale : It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.

#  - name: CIS Hardening | Ensuresystem accounts are secured - [1]
#    shell: >
#      awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!="'"$(which nologin)"'" && $7!="/bin/false") {print}' /etc/passwd
#    register: sec1task
#  - debug:
#      msg: "{{ sec1task.stdout }}"
#  - name: CIS Hardening | Ensuresystem accounts are secured - [2]
#    shell: >
#      awk -F: '($1!="root" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}'/etc/login.defs)"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!="L" && $2!="LK") {print $1}'
#    register: sec2task
#  - debug:
#      msg: "{{ sec2task.stdout }}"

## Ensure default user shell timeout is 900 seconds or less
## Rationale: Having no timeout value associated with a shell could allow an unauthorized user access to another user's shell session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening.

- name: CIS Hardening | Ensuredefault user shell timeout is 900 seconds or less -- CentOS or Red Hat Distribution
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    line: readonly TMOUT=900 ; export TMOUT
  with_items:
    - "/etc/bashrc"
    - "/etc/profile"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Ensure default group for the root account is GID 0
## Rationale: Using GID 0 for the root account helps prevent root -owned files from accidentally becoming accessible to non-privileged users.

- name: CIS Hardening | Ensuredefault group for the root account is 0
  ansible.builtin.shell: >
    grep "^root:" /etc/passwd | grep "0"
  register: rootacc
- debug: var=rootacc.stdout_lines

## Ensure default user umask is 027 or more restrictive
## Rationale: Setting a very secure default value for umask ensures that users make a conscious choice about their file permissions. A default umask setting of 077 causes files and directories created by users to not be readable by any other user on the system. A umask of 027 would make files and directories readable by users in the same Unix group, while a umask of 022 would make files readable by every user on the system.

## -- Need to work for CentOS

## Ensure access to the su command is restricted
## Rationale: Restricting the use of su , and using sudo in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via sudo , whereas su can only record that a user executed the su program.

- name: CIS Hardening | Ensureaccess to the su command is restricted
  ansible.builtin.lineinfile:
    path: /etc/pam.d/su
    line: auth required pam_wheel.so use_uid
