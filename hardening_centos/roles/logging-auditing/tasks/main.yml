---
# tasks file for logging-auditing

## Configure auditd & syslog-ng - Red Hat and Debian
## Rationale: If the syslog-ng service is not activated the system may default to the syslogd service or lack logging instead.


- name: Install auditd package - CentOS or Red Hat specific
  ansible.builtin.yum:
    name: "{{ item }}"
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "audit"
    - "audit-libs"

## Ensure auditing for processes that start prior to auditd is enabled
## Rationale: Audit events need to be captured on processes that start up prior to auditd , so that potential malicious activity cannot go undetected. During boot if audit=1, then the backlog will hold 64 records. If more that 64 records are created during boot, auditd records will be lost and potential malicious activity could go undetected.

- name: Configure grub2 in order to start auditd - CentOS or Red Hat distributions only
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX'
    insertafter: quiet
    line: GRUB_CMDLINE_LINUX="audit=1 audit_backlog_limit=8192"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Update Grub Configuration - CentOS or Red Hat specific
  ansible.builtin.command: grub2-mkconfig -o /boot/grub2/grub.cfg
  register: updategrubaudCen
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
- ansible.builtin.debug:
    var: updategrubaudCen.stdout_lines

## Ensure audit log storage size is configured
## Rationale: It is important that an appropriate size is determined for log files so that they do not impact the system and audit data is not lost.

- name: Ensure audit log storage size is configured
  ansible.builtin.replace:
    dest: /etc/audit/auditd.conf
    regexp: '^max_log_file = 8'
    replace: max_log_file = 100
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Ensure audit logs are not automatically deleted
## Rationale: In high security contexts, the benefits of maintaining a long audit history exceed the cost of storing the audit history.

- name: Ensure audit log storage size is configured
  ansible.builtin.replace:
    dest: /etc/audit/auditd.conf
    regexp: '^max_log_file_action = ROTATE'
    replace: 'max_log_file_action = keep_logs'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Ensure system is disabled when audit logs are full
## Rationale: In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability.

#  - name: Ensure system is disabled when audit logs are full
#    lineinfile:
#      dest: /etc/audit/auditd.conf
#      regexp: "{{ item.regexp }}"
#      line: "{{ item.line }}"
#    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
#    with_items:
#      - "{ regexp: 'space_left_action = SYSLOG', line: 'space_left_action = email'}"
#      - "{ regexp: 'action_mail_acct = root', line: 'action_mail_acct = root'}"
#      - "{ regexp: 'admin_space_left_action = SUSPEND', line: 'admin_space_left_action = halt'}"


## Ensure changes to system administration scope is collected
## Rationale: Changes in the /etc/sudoers file can indicate that an unauthorized change has been made to scope of system administrator activity.

- name: Create scope.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/scope.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure changes to system administration scope (sudoers) is collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/scope.rules
    line: "{{item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-w /etc/sudoers -p wa -k scope"
    - "-w /etc/sudoers.d/ -p wa -k scope"

## Ensure login and logout events are collected
## Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins.

- name: Ensure login and logout events are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/audit.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-w /var/log/faillog -p wa -k logins"
    - "-w /var/log/lastlog -p wa -k logins"

## Ensure session initiation information is collected
## Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in).

- name: Create logins file
  ansible.builtin.file:
    path: /etc/audit/rules.d/logins.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure session initiation information is collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/logins.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-w /var/run/utmp -p wa -k session"
    - "-w /var/log/wtmp -p wa -k logins"
    - "-w /var/log/btmp -p wa -k logins"

## Ensure events that modify date and time information are collected
## Rationale : Unexpected changes in system date and/or time could be a sign of malicious activity on the system. Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts.
## Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as  intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier "system-locale."

- name: Create time-change.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/time-change.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure events that modify date and time information are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/time-change.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change"
    - "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change"
    - "-a always,exit -F arch=b64 -S clock_settime -k time-change"
    - "-a always,exit -F arch=b32 -S clock_settime -k time-change"
    - "-w /etc/localtime -p wa -k time-change"

- name: Create system-locale.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/system-locale.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure events that modify date and time information are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/system-locale.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale"
    - "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale"
    - "-w /etc/issue -p wa -k system-locale"
    - "-w /etc/issue.net -p wa -k system-locale"
    - "-w /etc/hosts -p wa -k system-locale"
    - "-w /etc/sysconfig/network -p wa -k system-locale"

- name: Create identity.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/identity.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure events that modify date and time information are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/identity.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-w /etc/group -p wa -k identity"
    - "-w /etc/passwd -p wa -k identity"
    - "-w /etc/gshadow -p wa -k identity"
    - "-w /etc/shadow -p wa -k identity"
    - "-w /etc/security/opasswd -p wa -k identity"

## Ensure event that modify the systems Mandatory Access controls are collected
## Rationale: Changes to files in these directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system.

- name: Create MAC-policy.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/MAC-policy.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure event that modify the systems Mandatory Access controls are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/MAC-policy.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-w /etc/selinux/ -p wa -k MAC-policy"
    - "-w /usr/share/selinux -p wa -k MAC-policy"

## Ensure discretionary access control permission modification events are collected
## Rationale: Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation.

- name: Ensure discretionary access control permission modification events are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/audit.rules
    line: "{{ item }}"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
    - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"

- name: Create perm_mod.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/perm_mod.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure discretionary access control permission modification events are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/perm_mod.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"
    - "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod"

## Ensure unsuccessful unauthorized file access attempts are collected
## Rationale: Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system.

- name: Create access.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/access.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure discretionary access control permission modification events are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/access.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
    - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access"
    - "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"
    - "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access"

## Ensure use of privileged commands is collected
## Rationale: Execution of privileged commands by non-privileged users could be an indication of someone trying to gain unauthorized access to the system.

## To be worked on

## Ensure successful file system mounts are collected
## Rationale : It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document.

- name: Create mounts.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/mounts.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure successful file system mounts are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/mounts.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"
    - "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts"

## Ensure file deletion events by users are collected
## Rationale: Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered.

- name: Create delete.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/delete.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure file deletion events by users are collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/delete.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"
    - "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete"


## Ensure kernel module loading and unloading is collected
## Rationale: Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules.


## In immutable mode, unauthorized users cannot execute changes to the audit system to potentially hide malicious activity and then put the audit rules back. Users would most likely notice a system reboot and that could alert administrators of an attempt to make unauthorized audit changes.

- name: Create modules.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/modules.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure kernel module loading and unloading is collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/modules.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-w /sbin/insmod -p x -k modules"
    - "-w /sbin/rmmod -p x -k modules"
    - "-w /sbin/modprobe -p x -k modules"
    - "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules"

- name: Create modules.rules file
  ansible.builtin.file:
    path: /etc/audit/rules.d/99-finalize.rules
    state: touch
  ignore_errors: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Ensure kernel module loading and unloading is collected
  lineinfile:
    dest: /etc/audit/rules.d/99-finalize.rules
    line: "{{ item }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
    - "-e 2"

## Ensure changes to system administration actions are collected
## Rationale: Changes in /var/log/sudo.log indicate that an administrator has executed a command or the log file itself has been tampered with. Administrators will want to correlate the events written to the audit trail with the records written to /var/log/sudo.log to verify if unauthorized commands have been executed.

- name: Ensure changes to system administrator actions (sudolog) is collected
  ansible.builtin.lineinfile:
    dest: /etc/audit/rules.d/audit.rules
    line: -w /var/log/sudo.log -p wa -k actions
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Ensure journald is configured to send logs to rsyslog
## Rationale: Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.

- name: Ensure journald is configured to send logs to rsyslog
  ansible.builtin.lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: '#ForwardToSyslog=no'
    line: ForwardToSyslog=yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Ensure journald is configured to compress large log files
## Rationale: Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.

- name: Ensure journald is configured to compress large log files
  ansible.builtin.lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: '#Compress=no'
    line: Compress=yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == ' Red Hat Enterprise Linux'

## Ensure journald is configured to write logfiles to persistnent disk
## Rationale: Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.

- name: Ensure journald is configured to compress large log files
  ansible.builtin.lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: '#Storage=auto'
    line: Storage=persistent
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Ensure permissions on all log files are configured
## It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.

- name: Ensure permissions on all log files are configured
  ansible.builtin.command: find /var/log -type f -exec chmod g-wx,o-rwx "{}" + -o -type d -exec chmod g-w,o-rwx "{}" +
  register: logfileperms
  args:
    executable: /bin/bash
- debug:
    var: logfileperms.stdout_lines
