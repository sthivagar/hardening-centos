---
# tasks file for systemmain-hardening
- name: CIS Hardening | Ensurepermissions on /etc/passwd are configured
  ansible.builtin.file:
    path: /etc/passwd
    owner: root
    group: root
    mode: '0644'

## Rationale: If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert the user accounts.

- name: CIS Hardening | Ensurepermissions on /etc/shadow are configured - CentOS
  ansible.builtin.file:
    path: /etc/shadow
    owner: root
    group: root
    mode: '0640'
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

## Rationale: The /etc/group file needs to be protected from unauthorized changes by non-privileged users, but needs to be readable as this information is used with many non-privileged programs.

- name: CIS Hardening | Ensurepermissions on /etc/group are configured
  ansible.builtin.file:
    path: /etc/group
    owner: root
    group: root
    mode: '0644'

## Rationale: It is critical to ensure that the /etc/gshadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

- name: CIS Hardening | Ensurepermissions on /etc/gshadow are configured
  ansible.builtin.file:
    path: /etc/gshadow
    owner: root
    group: root
    mode: '0640'

## Rationale: It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

- name: CIS Hardening | Ensurepermissions on /etc/passwd- are configured
  ansible.builtin.file:
    path: /etc/passwd-
    owner: root
    group: root
    mode: '0600'

## Rationale: It is critical to ensure that the /etc/shadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

- name: CIS Hardening | Ensurepermissions on /etc/shadow- are configured
  ansible.builtin.file:
    path: /etc/shadow-
    owner: root
    group: root
    mode: '0600'

## Ensure permissions on /etc/group- are configured
## Rationale: It is critical to ensure that the /etc/group- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

- name: CIS Hardening | Ensurepermissions on /etc/group- are configured
  ansible.builtin.file:
    path: /etc/group-
    owner: root
    group: root
    mode: '0644'

## Ensure permissions on /etc/gshadow- are configured
## Rationale: It is critical to ensure that the /etc/gshadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

- name: CIS Hardening | Ensurepermissions on /etc/gshadow- are configured
  ansible.builtin.file:
    path: /etc/gshadow-
    owner: root
    group: root
    mode: '0640'

## Ensure no world writable files exist
## Rationale: Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity.

- name: CIS Hardening | Ensureno world writable files exist
  ansible.builtin.shell: >
    df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002 -exec chmod o-w {} \;
  register: noworldfresult
  args:
    executable: /bin/bash
- ansible.builtin.debug: var=noworldfresult.stdout_lines

## Ensure no unowned files or directories exist
## Rationale: A new user who is assigned the deleted user's user ID or group ID may then end up "owning" these files, and thus have more access on the system than was intended.

- name: CIS Hardening | Ensureno unowned files or directories exist
  ansible.builtin.shell: >
    df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser
  args:
    executable: /bin/bash
  register: nounownedfiles
- ansible.builtin.debug: var=nounownedfiles.stdout_lines

## Ensure no ungrouped files or directories exist
## Rationale: A new user who is assigned the deleted user's user ID or group ID may then end up "owning" these files, and thus have more access on the system than was intended.

- name: CIS Hardening | Ensureno ungrouped files or directories
  ansible.builtin.shell: >
    df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup
  register: ugfiledirs
  args:
    executable: /bin/bash
- ansible.builtin.debug: var=ugfiledirs.stdout_lines

